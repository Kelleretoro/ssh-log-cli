on:
  push:
    tags:
      - "v*" # Run when tag matches v*, i.e. v1.0, v20.15.10

name: Release

# ✨ NUEVO: Permisos para attestations
permissions:
  contents: write
  id-token: write      # Para firmar con Sigstore
  attestations: write  # Para guardar attestations

env:
  RELEASE_BIN: ssh-log-cli
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl
  # Space separated paths to include in the archive.
  RELEASE_ADDS: README.md

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      - name: Build (Linux)
        if: matrix.build == 'linux'
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cargo build --release --target ${{ env.LINUX_TARGET }}

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release

      - name: Build (Windows)
        if: matrix.build == 'windows'
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      - name: Create zip (Linux)
        if: matrix.build == 'linux'
        run: |
          mv ./target/${{ env.LINUX_TARGET }}/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.zip ./dist/*

      - name: Create zip (Windows)
        if: matrix.build == 'windows'
        shell: bash
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }}.exe ./dist/${{ env.RELEASE_BIN }}.exe
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.zip ./dist/*

      - name: Create zip (MacOS)
        if: matrix.build == 'macos'
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.zip ./dist/*

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux tarball
        uses: actions/download-artifact@v1
        with:
          name: linux

      - name: Download Windows tarball
        uses: actions/download-artifact@v1
        with:
          name: windows

      - name: Download MacOS zip
        uses: actions/download-artifact@v1
        with:
          name: macos

      - name: Add session logs with retry
        shell: bash
        run: |
          # Retry logic for external session logs service (503 errors)
          RETRY_COUNT=0
          MAX_RETRIES=5
          
          add_session_logs() {
            # Replace this with actual session logs service call
            # For demo purposes, we'll simulate a command that might fail with 503
            echo "Attempting to add session logs..."
            # curl -X POST "https://logs-service.example.com/api/sessions" \
            #   -H "Authorization: Bearer ${{ secrets.LOGS_API_TOKEN }}" \
            #   -H "Content-Type: application/json" \
            #   -d "{\"version\": \"${{ steps.get_version.outputs.VERSION }}\", \"artifacts\": [\"linux\", \"windows\", \"macos\"]}"
            
            # Simulate random failure for demo (remove in production)
            if [ $((RANDOM % 3)) -eq 0 ]; then
              echo "HTTP 503 Service Unavailable"
              return 503
            else
              echo "Session logs added successfully"
              return 0
            fi
          }
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if add_session_logs; then
              echo "Session logs added successfully on attempt $((RETRY_COUNT + 1))"
              break
            else
              EXIT_CODE=$?
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $EXIT_CODE -eq 503 ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((2 ** RETRY_COUNT))  # Exponential backoff: 2, 4, 8, 16 seconds
                echo "Service unavailable (503). Retry $RETRY_COUNT/$MAX_RETRIES in $WAIT_TIME seconds..."
                sleep $WAIT_TIME
              elif [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                echo "Failed to add session logs after $MAX_RETRIES attempts"
                exit 1
              else
                echo "Failed with non-503 error (exit code: $EXIT_CODE). Not retrying."
                exit $EXIT_CODE
              fi
            fi
          done

      - name: Release Linux zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.zip
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.zip

      - name: Release Windows zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.zip
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.zip

      - name: Release MacOS zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.zip
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.zip

      # ✨ NUEVO: Attestations para todos los artefactos
      - name: Attest release artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.zip
            ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_TARGET }}.zip
            ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}.zip
